{{/*
Default Template for SecretProviderClass. All Sub-Charts under this Chart can include the below template.
*/}}
{{- define "parent-chart.secretproviderclass-template" }}
{{- $templateName := .Chart.Name | kebabcase  -}}
{{- $myImageTag := "" -}}
{{ if hasKey .Values.global.imageTags $templateName }}
{{- $myImageTag = get .Values.global.imageTags $templateName -}}
{{- end }}
{{- if hasKey .Values.global.imageTags "all" }}
{{- if eq (get .Values.global.imageTags $templateName)  "general" }}
{{- $myImageTag = get .Values.global.imageTags "all" -}}
{{- end }}
{{- end }}
{{- if ne $myImageTag "" }}
{{- $scopeVars := get $.Values.global.secretProviderClass .Chart.Name -}}
{{- $envValue := "" -}}

{{/* Define managedIdentity base on global.env */}}
{{- $managedIdentity:= .Values.global.secretProviderClass.managedIdentity -}}
{{- $envManagedIdentity:= "" -}}
{{- if hasKey $managedIdentity $.Values.global.env }}
  {{- $envManagedIdentity = get $managedIdentity $.Values.global.env -}}
{{- else }}
  {{- $envManagedIdentity = get $managedIdentity "all" -}}
{{- end }}    

{{/* Define keyvaultName base on global.env */}}
{{- $keyvaultName:= .Values.global.secretProviderClass.keyvaultName -}}
{{- $envKeyvaultName:= "" -}}
{{- if hasKey $keyvaultName $.Values.global.env }}
  {{- $envKeyvaultName = get $keyvaultName $.Values.global.env -}}
{{- else }}
  {{- $envKeyvaultName = get $keyvaultName "all" -}}
{{- end }}    

{{/* Define tenantId base on global.env */}}
{{- $tenantId:= .Values.global.secretProviderClass.tenantId -}}
{{- $envtTenantId:= "" -}}
{{- if hasKey $tenantId $.Values.global.env }}
  {{- $envtTenantId = get $tenantId $.Values.global.env -}}
{{- else }}
  {{- $envtTenantId = get $tenantId "all" -}}
{{- end }}     
    

apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: akv-spc
  labels:
    {{- include "project.labels" . | nindent 4 }}  
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: {{ $envManagedIdentity }}  # Set the clientID of the user-assigned managed identity to use
    keyvaultName: {{ $envKeyvaultName }}        # Set to the name of your key vault
    tenantId: {{ $envtTenantId }}                 # The tenant ID of the key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
  {{- range $scopeVars | keys | sortAlpha }}
  {{- $scopeValues := get $scopeVars . -}}
  {{- if hasKey $scopeValues $.Values.global.env }}
    {{- $envValue = get $scopeValues $.Values.global.env -}}
  {{- else }}
    {{- $envValue = get $scopeValues "all" -}}
  {{- end }}  
        - |
          objectName: {{ $envValue }}
          objectType: secret              # object types: secret, key, or cert
          objectAlias: "{{ . }}"
          objectVersion: ""               # [OPTIONAL] object versions, default to latest if empty      
  {{- end }}             
  secretObjects:                              # [OPTIONAL] SecretObjects defines the desired state of synced Kubernetes secret objects
  - data:
  {{- range $scopeVars | keys | sortAlpha }}
  {{- $scopeValues := get $scopeVars . -}}
  {{- if hasKey $scopeValues $.Values.global.env }}
    {{- $envValue = get $scopeValues $.Values.global.env -}}
  {{- else }}
    {{- $envValue = get $scopeValues "all" -}}
  {{- end }}  
    - key: "{{ . }}"                           # data field to populate
      objectName: "{{ . }}"                        # name of the mounted content to sync; this could be the object name or the object alias
  {{- end }}          
    secretName: akv-secret                     # name of the Kubernetes secret object
    type: Opaque                              # type of Kubernetes secret object (for example, Opaque, kubernetes.io/tls)                     
        {{- end }}
        {{- end }}    
